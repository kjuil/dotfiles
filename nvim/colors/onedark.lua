local c = {
    black = "#0e1013",
    bg0 = "#1f2329",
    bg1 = "#282c34",
    bg2 = "#30363f",
    bg3 = "#323641",
    bg_d = "#181b20",
    bg_blue = "#61afef",
    bg_yellow = "#e8c88c",
    fg = "#a0a8b7",
    purple = "#bf68d9",
    green = "#8ebd6b",
    orange = "#cc9057",
    blue = "#4fa6ed",
    yellow = "#e2b86b",
    cyan = "#48b0bd",
    red = "#e55561",
    grey = "#535965",
    light_grey = "#7a818e",
    diff_add = "#272e23",
    diff_delete = "#2d2223",
    diff_change = "#172a3a",
    diff_text = "#274964",
    none = "NONE",
}

local cfg = {
    transparent = false,
    ending_tildes = false,
    code_style = {
        comments = 'italic',
        keywords = 'none',
        functions = 'none',
        strings = 'none',
        variables = 'none'
    },
}

local hl = {}

hl.common = {
    Normal = { fg = c.fg, bg = cfg.transparent and c.none or c.bg0 },
    Terminal = { fg = c.fg, bg = cfg.transparent and c.none or c.bg0 },
    EndOfBuffer = { fg = cfg.ending_tildes and c.bg2 or c.bg0, bg = cfg.transparent and c.none or c.bg0 },
    FoldColumn = { fg = c.fg, bg = cfg.transparent and c.none or c.bg1 },
    Folded = { fg = c.fg, bg = cfg.transparent and c.none or c.bg1 },
    SignColumn = { fg = c.fg, bg = cfg.transparent and c.none or c.bg0 },
    ToolbarLine = { fg = c.fg },
    Cursor = { fmt = "reverse" },
    vCursor = { fmt = "reverse" },
    iCursor = { fmt = "reverse" },
    lCursor = { fmt = "reverse" },
    CursorIM = { fmt = "reverse" },
    CursorColumn = { bg = c.bg1 },
    CursorLine = { bg = c.bg1 },
    ColorColumn = { bg = c.bg1 },
    CursorLineNr = { fg = c.fg },
    LineNr = { fg = c.grey },
    Conceal = { fg = c.grey, bg = c.bg1 },
    Added = { fg = c.green },
    Removed = { fg = c.red },
    Changed = { fg = c.blue },
    DiffAdd = { fg = c.none, bg = c.diff_add },
    DiffChange = { fg = c.none, bg = c.diff_change },
    DiffDelete = { fg = c.none, bg = c.diff_delete },
    DiffText = { fg = c.none, bg = c.diff_text },
    DiffAdded = { fg = c.green },
    DiffChanged = { fg = c.blue },
    DiffRemoved = { fg = c.red },
    DiffDeleted = { fg = c.red },
    DiffFile = { fg = c.cyan },
    DiffIndexLine = { fg = c.grey },
    Directory = { fg = c.blue },
    ErrorMsg = { fg = c.red, fmt = "bold" },
    WarningMsg = { fg = c.yellow, fmt = "bold" },
    MoreMsg = { fg = c.blue, fmt = "bold" },
    CurSearch = { fg = c.bg0, bg = c.orange },
    IncSearch = { fg = c.bg0, bg = c.orange },
    Search = { fg = c.bg0, bg = c.bg_yellow },
    Substitute = { fg = c.bg0, bg = c.green },
    MatchParen = { fg = c.none, bg = c.grey },
    NonText = { fg = c.grey },
    Whitespace = { fg = c.grey },
    SpecialKey = { fg = c.grey },
    Pmenu = { fg = c.fg, bg = c.bg1 },
    PmenuSbar = { fg = c.none, bg = c.bg1 },
    PmenuSel = { fg = c.bg0, bg = c.bg_blue },
    WildMenu = { fg = c.bg0, bg = c.blue },
    PmenuThumb = { fg = c.none, bg = c.grey },
    Question = { fg = c.yellow },
    SpellBad = { fg = c.none, fmt = "undercurl", sp = c.red },
    SpellCap = { fg = c.none, fmt = "undercurl", sp = c.yellow },
    SpellLocal = { fg = c.none, fmt = "undercurl", sp = c.blue },
    SpellRare = { fg = c.none, fmt = "undercurl", sp = c.purple },
    StatusLine = { fg = c.fg, bg = cfg.transparent and c.none or c.bg2 },
    StatusLineTerm = { fg = c.fg, bg = cfg.transparent and c.none or c.bg2 },
    StatusLineNC = { fg = c.grey, bg = cfg.transparent and c.none or c.bg1 },
    StatusLineTermNC = { fg = c.grey, bg = cfg.transparent and c.none or c.bg1 },
    TabLine = { fg = c.fg, bg = cfg.transparent and c.none or c.bg1 },
    TabLineFill = { fg = c.grey, bg = cfg.transparent and c.none or c.bg1 },
    TabLineSel = { fg = c.bg0, bg = cfg.transparent and c.none or c.fg },
    WinSeparator = { fg = c.bg3 },
    Visual = { bg = c.bg3 },
    VisualNOS = { fg = c.none, bg = c.bg2, fmt = "underline" },
    QuickFixLine = { fg = c.blue, fmt = "underline" },
    Debug = { fg = c.yellow },
    debugPC = { fg = c.bg0, bg = c.green },
    debugBreakpoint = { fg = c.bg0, bg = c.red },
    ToolbarButton = { fg = c.bg0, bg = c.bg_blue },
    FloatBorder = { fg = c.grey, bg = cfg.transparent and c.none or c.bg1 },
    NormalFloat = { fg = c.fg, bg = cfg.transparent and c.none or c.bg1 },
}
hl.syntax = {
    String = { fg = c.green, fmt = cfg.code_style.strings },
    Character = { fg = c.orange },
    Number = { fg = c.orange },
    Float = { fg = c.orange },
    Boolean = { fg = c.orange },
    Type = { fg = c.yellow },
    Structure = { fg = c.yellow },
    StorageClass = { fg = c.yellow },
    Identifier = { fg = c.red, fmt = cfg.code_style.variables },
    Constant = { fg = c.cyan },
    PreProc = { fg = c.purple },
    PreCondit = { fg = c.purple },
    Include = { fg = c.purple },
    Keyword = { fg = c.purple, fmt = cfg.code_style.keywords },
    Define = { fg = c.purple },
    Typedef = { fg = c.yellow },
    Exception = { fg = c.purple },
    Conditional = { fg = c.purple, fmt = cfg.code_style.keywords },
    Repeat = { fg = c.purple, fmt = cfg.code_style.keywords },
    Statement = { fg = c.purple },
    Macro = { fg = c.red },
    Error = { fg = c.purple },
    Label = { fg = c.purple },
    Special = { fg = c.red },
    SpecialChar = { fg = c.red },
    Function = { fg = c.blue, fmt = cfg.code_style.functions },
    Operator = { fg = c.purple },
    Title = { fg = c.cyan },
    Tag = { fg = c.green },
    Delimiter = { fg = c.light_grey },
    Comment = { fg = c.grey, fmt = cfg.code_style.comments },
    SpecialComment = { fg = c.grey, fmt = cfg.code_style.comments },
    Todo = { fg = c.red, fmt = cfg.code_style.comments }
}

hl.treesitter = {
    ["@annotation"] = { fg = c.fg },
    ["@attribute"] = { fg = c.cyan },
    ["@attribute.typescript"] = { fg = c.blue },
    ["@boolean"] = { fg = c.orange },
    ["@character"] = { fg = c.orange },
    ["@comment"] = { fg = c.grey, fmt = cfg.code_style.comments },
    ["@comment.todo"] = { fg = c.red, fmt = cfg.code_style.comments },
    ["@comment.todo.unchecked"] = { fg = c.red, fmt = cfg.code_style.comments },
    ["@comment.todo.checked"] = { fg = c.green, fmt = cfg.code_style.comments },
    ["@constant"] = { fg = c.orange, fmt = cfg.code_style.constants },
    ["@constant.builtin"] = { fg = c.orange, fmt = cfg.code_style.constants },
    ["@constant.macro"] = { fg = c.orange, fmt = cfg.code_style.constants },
    ["@constructor"] = { fg = c.yellow, fmt = "bold" },
    ["@diff.add"] = hl.common.DiffAdded,
    ["@diff.delete"] = hl.common.DiffDeleted,
    ["@diff.plus"] = hl.common.DiffAdded,
    ["@diff.minus"] = hl.common.DiffDeleted,
    ["@diff.delta"] = hl.common.DiffChanged,
    ["@error"] = { fg = c.fg },
    ["@function"] = { fg = c.blue, fmt = cfg.code_style.functions },
    ["@function.builtin"] = { fg = c.cyan, fmt = cfg.code_style.functions },
    ["@function.macro"] = { fg = c.cyan, fmt = cfg.code_style.functions },
    ["@function.method"] = { fg = c.blue, fmt = cfg.code_style.functions },
    ["@keyword"] = { fg = c.purple, fmt = cfg.code_style.keywords },
    ["@keyword.conditional"] = { fg = c.purple, fmt = cfg.code_style.keywords },
    ["@keyword.directive"] = { fg = c.purple },
    ["@keyword.exception"] = { fg = c.purple },
    ["@keyword.function"] = { fg = c.purple, fmt = cfg.code_style.functions },
    ["@keyword.import"] = { fg = c.purple },
    ["@keyword.operator"] = { fg = c.purple, fmt = cfg.code_style.keywords },
    ["@keyword.repeat"] = { fg = c.purple, fmt = cfg.code_style.keywords },
    ["@label"] = { fg = c.red },
    ["@markup.emphasis"] = { fg = c.fg, fmt = 'italic' },
    ["@markup.environment"] = { fg = c.fg },
    ["@markup.environment.name"] = { fg = c.fg },
    ["@markup.heading"] = { fg = c.orange, fmt = 'bold' },
    ["@markup.link"] = { fg = c.blue },
    ["@markup.link.url"] = { fg = c.cyan, fmt = 'underline' },
    ["@markup.list"] = { fg = c.red },
    ["@markup.math"] = { fg = c.fg },
    ["@markup.raw"] = { fg = c.green },
    ["@markup.strike"] = { fg = c.fg, fmt = 'strikethrough' },
    ["@markup.strong"] = { fg = c.fg, fmt = 'bold' },
    ["@markup.underline"] = { fg = c.fg, fmt = 'underline' },
    ["@module"] = { fg = c.yellow },
    ["@none"] = { fg = c.fg },
    ["@number"] = { fg = c.orange },
    ["@number.float"] = { fg = c.orange },
    ["@operator"] = { fg = c.fg },
    ["@parameter.reference"] = { fg = c.fg },
    ["@property"] = { fg = c.cyan },
    ["@punctuation.delimiter"] = { fg = c.light_grey },
    ["@punctuation.bracket"] = { fg = c.light_grey },
    ["@string"] = { fg = c.green, fmt = cfg.code_style.strings },
    ["@string.regexp"] = { fg = c.orange, fmt = cfg.code_style.strings },
    ["@string.escape"] = { fg = c.red, fmt = cfg.code_style.strings },
    ["@string.special.symbol"] = { fg = c.cyan },
    ["@tag"] = { fg = c.purple },
    ["@tag.attribute"] = { fg = c.yellow },
    ["@tag.delimiter"] = { fg = c.purple },
    ["@text"] = { fg = c.fg },
    ["@note"] = { fg = c.fg },
    ["@warning"] = { fg = c.fg },
    ["@danger"] = { fg = c.fg },
    ["@type"] = { fg = c.yellow },
    ["@type.builtin"] = { fg = c.orange },
    ["@variable"] = { fg = c.fg, fmt = cfg.code_style.variables },
    ["@variable.builtin"] = { fg = c.red, fmt = cfg.code_style.variables },
    ["@variable.member"] = { fg = c.cyan },
    ["@variable.parameter"] = { fg = c.red },
    ["@markup.heading.1.markdown"] = { fg = c.red, fmt = "bold" },
    ["@markup.heading.2.markdown"] = { fg = c.purple, fmt = "bold" },
    ["@markup.heading.3.markdown"] = { fg = c.orange, fmt = "bold" },
    ["@markup.heading.4.markdown"] = { fg = c.red, fmt = "bold" },
    ["@markup.heading.5.markdown"] = { fg = c.purple, fmt = "bold" },
    ["@markup.heading.6.markdown"] = { fg = c.orange, fmt = "bold" },
    ["@markup.heading.1.marker.markdown"] = { fg = c.red, fmt = "bold" },
    ["@markup.heading.2.marker.markdown"] = { fg = c.purple, fmt = "bold" },
    ["@markup.heading.3.marker.markdown"] = { fg = c.orange, fmt = "bold" },
    ["@markup.heading.4.marker.markdown"] = { fg = c.red, fmt = "bold" },
    ["@markup.heading.5.marker.markdown"] = { fg = c.purple, fmt = "bold" },
    ["@markup.heading.6.marker.markdown"] = { fg = c.orange, fmt = "bold" },
    ["@conditional"] = { fg = c.purple, fmt = cfg.code_style.keywords },
    ["@exception"] = { fg = c.purple },
    ["@field"] = { fg = c.cyan },
    ["@float"] = { fg = c.orange },
    ["@include"] = { fg = c.purple },
    ["@method"] = { fg = c.blue, fmt = cfg.code_style.functions },
    ["@namespace"] = { fg = c.yellow },
    ["@parameter"] = { fg = c.red },
    ["@preproc"] = { fg = c.purple },
    ["@punctuation.special"] = { fg = c.red },
    ["@repeat"] = { fg = c.purple, fmt = cfg.code_style.keywords },
    ["@string.regex"] = { fg = c.orange, fmt = cfg.code_style.strings },
    ["@text.strong"] = { fg = c.fg, fmt = 'bold' },
    ["@text.emphasis"] = { fg = c.fg, fmt = 'italic' },
    ["@text.underline"] = { fg = c.fg, fmt = 'underline' },
    ["@text.strike"] = { fg = c.fg, fmt = 'strikethrough' },
    ["@text.title"] = { fg = c.orange, fmt = 'bold' },
    ["@text.literal"] = { fg = c.green },
    ["@text.uri"] = { fg = c.cyan, fmt = 'underline' },
    ["@text.todo"] = { fg = c.red, fmt = cfg.code_style.comments },
    ["@text.todo.unchecked"] = { fg = c.red, fmt = cfg.code_style.comments },
    ["@text.todo.checked"] = { fg = c.green, fmt = cfg.code_style.comments },
    ["@text.math"] = { fg = c.fg },
    ["@text.reference"] = { fg = c.blue },
    ["@text.environment"] = { fg = c.fg },
    ["@text.environment.name"] = { fg = c.fg },
    ["@text.diff.add"] = { fg = c.green },
    ["@text.diff.delete"] = { fg = c.red },
}

hl.lsp = {
    ["@lsp.type.comment"] = hl.treesitter["@comment"],
    ["@lsp.type.enum"] = hl.treesitter["@type"],
    ["@lsp.type.enumMember"] = hl.treesitter["@constant.builtin"],
    ["@lsp.type.interface"] = hl.treesitter["@type"],
    ["@lsp.type.typeParameter"] = hl.treesitter["@type"],
    ["@lsp.type.keyword"] = hl.treesitter["@keyword"],
    ["@lsp.type.namespace"] = hl.treesitter["@module"],
    ["@lsp.type.parameter"] = hl.treesitter["@variable.parameter"],
    ["@lsp.type.property"] = hl.treesitter["@property"],
    ["@lsp.type.variable"] = hl.treesitter["@variable"],
    ["@lsp.type.macro"] = hl.treesitter["@function.macro"],
    ["@lsp.type.method"] = hl.treesitter["@function.method"],
    ["@lsp.type.number"] = hl.treesitter["@number"],
    ["@lsp.type.generic"] = hl.treesitter["@text"],
    ["@lsp.type.builtinType"] = hl.treesitter["@type.builtin"],
    ["@lsp.typemod.method.defaultLibrary"] = hl.treesitter["@function"],
    ["@lsp.typemod.function.defaultLibrary"] = hl.treesitter["@function"],
    ["@lsp.typemod.operator.injected"] = hl.treesitter["@operator"],
    ["@lsp.typemod.string.injected"] = hl.treesitter["@string"],
    ["@lsp.typemod.variable.defaultLibrary"] = hl.treesitter["@variable.builtin"],
    ["@lsp.typemod.variable.injected"] = hl.treesitter["@variable"],
    ["@lsp.typemod.variable.static"] = hl.treesitter["@constant"],
}

local function sethl(highlights)
    for group, settings in pairs(highlights) do
        vim.api.nvim_command(string.format("highlight %s guifg=%s guibg=%s guisp=%s gui=%s", group,
            settings.fg or "none",
            settings.bg or "none",
            settings.sp or "none",
            settings.fmt or "none"))
    end
end

vim.cmd("hi clear")
vim.g.colors_name = "onedark"
if vim.fn.exists("syntax_on") then vim.cmd("syntax reset") end

sethl(hl.common)
sethl(hl.syntax)
sethl(hl.treesitter)
sethl(hl.lsp)
